package transport

import (
	"encoding/json"
	"fmt"
	"log"
	"time"

	"github.com/gorilla/websocket"
)

// Authenticator: handles WebSocket authentication
type Authenticator struct{}

// NewAuthenticator: creates a new authenticator
func NewAuthenticator() *Authenticator {
	return &Authenticator{}
}

// Authenticate: reads and validates authentication message from new connection
func (a *Authenticator) Authenticate(conn *websocket.Conn, timeout time.Duration) (string, error) {
	// Read deadline
	conn.SetReadDeadline(time.Now().Add(timeout))
	_, msg, err := conn.ReadMessage()
	if err != nil {
		return "", fmt.Errorf("failed to receive auth message: %w", err)
	}
	conn.SetReadDeadline(time.Time{}) // Clear timeout

	var authMsg struct {
		Type   string `json:"type"`
		UserID string `json:"userId"`
	}

	if err := json.Unmarshal(msg, &authMsg); err != nil {
		return "", fmt.Errorf("invalid auth message format: %w", err)
	}

	if authMsg.Type != "authenticate" {
		return "", fmt.Errorf("expected authenticate message, got: %s", authMsg.Type)
	}

	// user ID empty string is valid - will be generated by caller
	log.Printf("Authentication message received for userID: %s", authMsg.UserID)
	return authMsg.UserID, nil
}
